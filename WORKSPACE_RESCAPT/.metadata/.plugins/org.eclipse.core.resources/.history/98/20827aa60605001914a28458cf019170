#include "main.h"
//====================================================================
#define VL6180X	0 //Carte sensor de lumininosite
#define MPU9250	0
#define MPL115A_ANEMO 1
//====================================================================
//			CAN ACCEPTANCE FILTER
//====================================================================
#define USE_FILTER	1
// Can accept until 4 Standard IDs
#define ID_1	0x01
#define ID_2	0x02
#define ID_3	0x03
#define ID_4	0x04
//====================================================================
extern void systemClock_Config(void);

void (*rxCompleteCallback) (void);
void can_callback(void);

CAN_Message      rxMsg;
CAN_Message      txMsg;
long int        counter = 0;

uint8_t* aTxBuffer[2];

extern float magCalibration[3];

#if VL6180X
	void VL6180x_Init(void);
	void VL6180x_Step(void);
#endif

#if MPL115A_ANEMO
	#define PRESH   0x80
	#define PRESL   0x82
	#define TEMPH   0x84
	#define TEMPL   0x86

	#define A0MSB   0x88 //Read coefficient data byte 1 (pag 8 datasheet)
	#define A0LSB   0x8A
	#define B1MSB   0x8C
	#define B1LSB   0x8E
	#define B2MSB   0x90
	#define B2LSB   0x92
	#define C12MSB  0x94
	#define C12LSB  0x96

	float a0;
	float b1;
	float b2;
	float c12;

	uint16_t anemoCount;
#endif

int status;
int new_switch_state;
int switch_state = -1;

//====================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>>> MAIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================
int main(void)
{
	HAL_Init();
	systemClock_Config();
    SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000); //SysTick end of count event each 1ms
	uart2_Init();
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0); //Port A, pin 4, Chip Select:0


#if VL6180X || MPU9250
	i2c1_Init();
#endif

	HAL_Delay(1000); // Wait

#if MPL115A_ANEMO
    spi1_Init();
    anemo_Timer1Init();
	MPL115A_ANEMO_Init();

#endif

#if VL6180X
    VL6180x_Init();
#endif

#if MPU9250
    mpu9250_InitMPU9250();
    mpu9250_CalibrateMPU9250();
#if USE_MAGNETOMETER
    mpu9250_InitAK8963(magCalibration);
#endif
    uint8_t response=0;
	response =  mpu9250_WhoAmI();
	// term_printf("%d",response);
#endif


    can_Init();
    can_SetFreq(CAN_BAUDRATE); // CAN BAUDRATE : 500 MHz -- cf Inc/config.h
#if USE_FILTER
    can_Filter_list((ID_1<<21)|(ID_2<<5) , (ID_3<<21)|(ID_4<<5) , CANStandard, 0); // Accept until 4 Standard IDs
#else
    can_Filter_disable(); // Accept everybody
#endif
    can_IrqInit();
    can_IrqSet(&can_callback);

    txMsg.id=0x55;
		txMsg.data[0]=0;
    txMsg.data[1]=0;
    txMsg.data[2]=0;
    txMsg.data[3]=0;
    txMsg.data[4]=0;
    txMsg.data[5]=0;
    txMsg.data[6]=0;
    txMsg.data[7]=0;
    txMsg.len=8;
    txMsg.format=CANStandard;
    txMsg.type=CANData;

    can_Write(txMsg);


    // Décommenter pour utiliser ce Timer ; permet de déclencher une interruption toutes les N ms
    // Le programme d'interruption est dans tickTimer.c
    tickTimer_Init(150); // period in ms

    while (1) {

		#if VL6180X
		  VL6180x_Step();
		#endif

		#if MPU9250
		  // Developper carte accelerometre
		#endif

		#if MPL115A_ANEMO
		  MPL115A_ANEMO_Step();
		#endif
    }
	return 0;
}


//====================================================================
//			CAN CALLBACK RECEPT
//====================================================================

void can_callback(void)
{
	//Interruption
	CAN_Message msg_rcv;
	/*int i=0;

	can_Read(&msg_rcv);
	txMsg.id=0x55;			// Identifiant du message à envoyer

	for(i=0;i<8;i++)
	{
	txMsg.data[i]=msg_rcv.data[i]+1;
	}
	txMsg.len=8;			// Nombre d'octets à envoyer
	txMsg.format=CANStandard;
	txMsg.type=CANData;

	can_Write(txMsg);*/

	can_Read(&msg_rcv);
	rxMsg = msg_rcv;
	#if VL6180X
		if(msg_rcv.id==0x02){
			if(msg_rcv.data[0]=='L'){
				new_switch_state = 1;
			}else if(msg_rcv.data[0]=='D'){
				new_switch_state = 0;
			}
		}
	#endif
}
//====================================================================
//			TIMER CALLBACK PERIOD
//====================================================================

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	//term_printf("from timer interrupt\n\r");
	#if MPL115A_ANEMO
		anemo_Step(anemoCount);
	#endif
	
	#if MPU9250
		mpu9250_Step();
	#endif

}
//====================================================================

void VL6180x_Init(void)
{
	uint8_t id;
	State.mode = 1;

    XNUCLEO6180XA1_Init();
    HAL_Delay(500); // Wait
    // RESET
    XNUCLEO6180XA1_Reset(0);
    HAL_Delay(10);
    XNUCLEO6180XA1_Reset(1);
    HAL_Delay(1);

    HAL_Delay(10);
    VL6180x_WaitDeviceBooted(theVL6180xDev);
    id=VL6180x_Identification(theVL6180xDev);
    //term_printf("id=%d, should be 180 (0xB4) \n\r", id);
    VL6180x_InitData(theVL6180xDev);

    State.InitScale=VL6180x_UpscaleGetScaling(theVL6180xDev);
    State.FilterEn=VL6180x_FilterGetState(theVL6180xDev);

     // Enable Dmax calculation only if value is displayed (to save computation power)
    VL6180x_DMaxSetState(theVL6180xDev, DMaxDispTime>0);

    switch_state=-1 ; // force what read from switch to set new working mode
    State.mode = AlrmStart;
}
//====================================================================
void VL6180x_Step(void)
{
	DISP_ExecLoopBody();

  //new_switch_state = XNUCLEO6180XA1_GetSwitch();
  if (new_switch_state = switch_state) {
      switch_state=new_switch_state;
      status = VL6180x_Prepare(theVL6180xDev);
      // Increase convergence time to the max (this is because proximity config of API is used)
      VL6180x_RangeSetMaxConvergenceTime(theVL6180xDev, 63);
      if (status) {
          AbortErr("ErIn");
      }
      else{
          if (switch_state == 0) {
              VL6180x_SetupGPIO1(theVL6180xDev, GPIOx_SELECT_GPIO_INTERRUPT_OUTPUT, INTR_POL_HIGH);
              VL6180x_ClearAllInterrupt(theVL6180xDev);
              State.ScaleSwapCnt=0;
              DoScalingSwap( State.InitScale);
          } else {
               State.mode = RunAlsPoll;
               InitAlsMode();
          }
      }
  }

  switch (State.mode) {
  case RunRangePoll:
      RangeState();
      int range = Range.range_mm;
      txMsg.id=ID_2;
      txMsg.len=5;
      txMsg.data[0]='R';
      txMsg.data[1]=range & 0xFF;
      txMsg.data[2]=(range>>8) & 0xFF;
      txMsg.data[3]=(range>>16)  & 0xFF;
      txMsg.data[4]=(range>>24)  & 0xFF;
      txMsg.format=CANStandard;
      txMsg.type=CANData;
      can_Write(txMsg);
      break;

  case RunAlsPoll:
  	AlsState();
  	uint32_t lux = Als.lux;
  	txMsg.id=ID_2;
  	txMsg.len=5;
  	txMsg.data[0]='L';
  	txMsg.data[1]=lux & 0xFF;
  	txMsg.data[2]=(lux>>8) & 0xFF;
  	txMsg.data[3]=(lux>>16)  & 0xFF;
  	txMsg.data[4]=(lux>>24)  & 0xFF;
  	txMsg.format=CANStandard;
  	txMsg.type=CANData;
  	can_Write(txMsg);
      break;

  case InitErr:
      TimeStarted = g_TickCnt;
      State.mode = WaitForReset;
      break;

  case AlrmStart:
     GoToAlaramState();
     break;

  case AlrmRun:
      AlarmState();
      break;

  case FromSwitch:
      // force reading swicth as re-init selected mode
      switch_state=!XNUCLEO6180XA1_GetSwitch();
      break;

  case ScaleSwap:

      if (g_TickCnt - TimeStarted >= ScaleDispTime) {
          State.mode = RunRangePoll;
          TimeStarted=g_TickCnt; /* reset as used for --- to er display */
      }
      else
      {
      	DISP_ExecLoopBody();
      }
      break;

  default: {
  	 DISP_ExecLoopBody();
        if (g_TickCnt - TimeStarted >= 5000) {
            NVIC_SystemReset();
        }
  }
  }
}
//====================================================================
#if MPL115A_ANEMO
void MPL115A_ANEMO_Init(void){

	// read registers that contain the chip-unique parameters to do the math
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);

	spi1_Transfer(A0MSB);
	unsigned int A0H = spi1_Transfer(0x00);
	spi1_Transfer(A0LSB);
	unsigned int A0L = spi1_Transfer(0x00);
	a0 = (A0H << 5) + (A0L >> 3) + (A0L & 0x07) / 8.0;

	spi1_Transfer(B1MSB);
	unsigned int B1H = spi1_Transfer(0x00);
	spi1_Transfer(B1LSB);
	unsigned int B1L = spi1_Transfer(0x00);
	b1 = ( ( ( (B1H & 0x1F) * 0x100)+B1L) / 8192.0) - 3 ;

	spi1_Transfer(B2MSB);
	unsigned int B2H = spi1_Transfer(0x00);
	spi1_Transfer(B2LSB);
	unsigned int B2L = spi1_Transfer(0x00);
	b2 = ( ( ( (B2H - 0x80) << 8) + B2L) / 16384.0 ) - 2 ;

	spi1_Transfer(C12MSB);
	unsigned int C12H = spi1_Transfer(0x00);
	spi1_Transfer(C12LSB);
	unsigned int C12L = spi1_Transfer(0x00);
	c12 = ( ( ( C12H * 0x100 ) + C12L) / 16777216.0 )  ;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

}

//====================================================================
void MPL115A_ANEMO_Step(void){

	unsigned char high,low;
	int pres,temp;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	spi1_Transfer(0x24);
	spi1_Transfer(0x00);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
	HAL_Delay(5);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
	spi1_Transfer(0x80);
	high = spi1_Transfer(0x00);
	spi1_Transfer(0x82);
	low = spi1_Transfer(0x00);
	pres = (low | (high<<8))>>6;

	spi1_Transfer(0x84);
	high = spi1_Transfer(0x00);
	spi1_Transfer(0x86);
	low = spi1_Transfer(0x00);
	temp = (low | (high<<8))>>6;

	spi1_Transfer(0x00);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);

	float pressure = a0+(b1+c12*temp)*pres+b2*temp;
	float preskPa = pressure*(65.0/1023.0)+50.0;


	int dec_preskPa = (preskPa-(int)preskPa)*100;

	//term_printf("Pres: %d,%d \n\r", (int)preskPa,dec_preskPa);

	txMsg.id=	ID_1;
	txMsg.format=CANStandard;
	txMsg.type=CANData;
	txMsg.len=8;

	txMsg.data[0]= anemoCount & 0xFF;
	txMsg.data[1]=(anemoCount>>8) & 0xFF;
	txMsg.data[2]=(anemoCount>>16)  & 0xFF;
	txMsg.data[3]=(anemoCount>>24)  & 0xFF;
	txMsg.data[4]= dec_preskPa;
	txMsg.data[5]=(int)preskPa;
	txMsg.data[6]=((int)preskPa>>8) ;
	txMsg.data[7]=((int)preskPa>>16);


	can_Write(txMsg);

	HAL_Delay(1000);
}

#endif
//====================================================================
